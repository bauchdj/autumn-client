/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns a Stripe Checkout URL for the customer to complete their purchase, or handles the purchase if the customer's card is already on file. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer and product to attach */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Your unique identifier for the customer */
                        customer_id: string;
                        /** @description Product ID, set when creating the product in the Autumn dashboard */
                        product_id: string;
                        /** @description List of product IDs to attach to the customer in the same subscription or transaction */
                        product_ids?: string[];
                        /** @description URL to redirect to after the purchase is successful */
                        success_url?: string;
                        /**
                         * @description Always return a Stripe Checkout URL, even if the customer's card is already on file.
                         * @default false
                         */
                        force_checkout?: boolean;
                        /** @description An array of billing options for the product. Required for some pricing types. */
                        options?: {
                            /** @description Feature ID of the feature that will be affected by the options. */
                            feature_id?: string;
                            /** @description Quantity of the feature (eg number of seats) to be purchased. Required if billing is in-advance usage-based. */
                            quantity?: number;
                            /** @description Customer will be charged for this product when the balance of this feature falls below this threshold. Required if billing is threshold-based. */
                            threshold?: number;
                        }[];
                        customer_data?: components["schemas"]["CustomerData"];
                    };
                };
            };
            responses: {
                /** @description Device attached */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description URL to the Stripe checkout page. Only present if payment is required. */
                            checkout_url?: string;
                            /** @description Indicates if the product change was successful. Only present if payment is not required. */
                            success?: boolean;
                            /** @description Description of the action taken */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new customer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer to create */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Your unique identifier for the customer */
                        id: string;
                    } & components["schemas"]["CustomerData"];
                };
            };
            responses: {
                /** @description Customer created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{customer_id}/billing_portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the customer's Stripe billing portal URL, so they can manage their subscription and see invoice history. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID which you provided when creating the customer */
                    customer_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved billing portal URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description URL to access the customer's billing portal */
                            url?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send a usage event to Autumn */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Event to send */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description ID which you provided when creating the customer */
                        customer_id: string;
                    } & WithRequired<components["schemas"]["EventData"], "feature_id"> & {
                        customer_data?: components["schemas"]["CustomerData"];
                    };
                };
            };
            responses: {
                /** @description Event sent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entitled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check if a customer is allowed to use a feature */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer to check */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description ID which you provided when creating the customer */
                        customer_id: string;
                        /** @description ID of the feature to check access to */
                        feature_id: string;
                        /** @description If you know the quantity of the feature the end user is consuming in advance */
                        required_quantity?: number;
                        /** @description Record a usage event together with checking access, in the same request. For dedicated usage tracking (recommended), see [/events](/api-reference/events). */
                        event_data?: components["schemas"]["EventData"];
                        customer_data?: components["schemas"]["CustomerData"];
                    };
                };
            };
            responses: {
                /** @description Customer has access to the product */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the customer has access to the feature */
                            allowed?: boolean;
                            /** @description Balances of this feature / credits using this feature for the customer */
                            balances?: {
                                /** @description ID of the feature */
                                feature_id?: string;
                                /** @description Balance of the feature */
                                balance?: number;
                                /** @description Required amount of the feature */
                                required?: number;
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Properties to create a new customer. If a customer with the provided `customer_id` already exists, this object is ignored. Alternatively, use the [/customers](/api-reference/customers) endpoint. */
        CustomerData: {
            /** @description Name of the customer */
            name?: string;
            /** @description Email of the customer */
            email?: string;
            /** @description Unique fingerprint of the customer, used to prevent free trial abuse (eg serial_number, device_id, etc) */
            fingerprint?: string;
        };
        EventData: {
            /** @description ID of the feature to track usage for. */
            feature_id?: string;
            /**
             * @description How much of the event should be counted towards the balance. Default is 1.
             * @default 1
             */
            value: number;
            /** @description For use in place of the feature_id. This should be used if multiple features are tracked in the same event. */
            event_name?: string;
            /** @description Unique identifier for the event. If the same event is sent multiple times, it will be ignored. */
            idempotency_key?: string;
            /** @description Event properties. */
            properties?: Record<string, never>;
        };
        Error: {
            /** Format: int32 */
            error: number;
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type operations = Record<string, never>;
